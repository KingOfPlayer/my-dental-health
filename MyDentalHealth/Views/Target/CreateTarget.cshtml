@model TargetDto

<form method="post" asp-action="CreateTarget" class="needs-validation" novalidate>
	<h1>Sing up</h1>
	<div class="form-group my-2">
		<label asp-for="Name"></label>
		<input asp-for="Name" class="form-control @(ViewData?.ModelState["Name"]?.Errors.Count() > 0?"is-invalid":"")" title="" >
		<div id="Name" class="invalid-feedback">
			@{
				if (ViewData?.ModelState?.TryGetValue("Name", out var modelStateEntry) == true)
					foreach (var err in modelStateEntry.Errors)
					{
						@err.ErrorMessage
					 	<br />
					}
			}
		</div>
	</div>
	<div class="form-group my-2">
		<label asp-for="Description"></label>
		<input asp-for="Description" class="form-control @(ViewData?.ModelState["Description"]?.Errors.Count() > 0?"is-invalid":"")" title="" >
		<div id="Description" class="invalid-feedback">
			@{
				if (ViewData?.ModelState?.TryGetValue("Description",out modelStateEntry) == true)
					foreach (var err in modelStateEntry.Errors)
					{
						@err.ErrorMessage
						<br />
					}
			}
		</div>
	</div>
	<div class="form-group my-2">
		<label asp-for="TargetPiroityId"></label>
		<select asp-for="TargetPiroityId" asp-items="@ViewBag.TargetPiroities" class="form-control"></select>
	</div>
	<div class="form-group my-2">
		<label asp-for="TargetPeriodTypeId"></label>
		<select asp-for="TargetPeriodTypeId" asp-items="@ViewBag.TargetPeriodTypes" class="form-control"></select>
	</div>
	<div class="form-group my-2">
		<label asp-for="PeriodLength">Validate Password</label>
		<input asp-for="PeriodLength" class="form-control @(ViewData?.ModelState["PeriodLength"]?.Errors.Count() > 0?"is-invalid":"")" title="" >
		<div id="PeriodLength" class="invalid-feedback">
			@{
				if (ViewData?.ModelState?.TryGetValue("PeriodLength", out modelStateEntry) == true)
					foreach (var err in modelStateEntry.Errors)
					{
						@err.ErrorMessage
						<br />
					}
			}
		</div>
	</div>
	<div class="form-group my-2">
		<label asp-for="Count"></label>
		<input asp-for="Count" class="form-control @(ViewData?.ModelState["Count"]?.Errors.Count() > 0?"is-invalid":"")" title="" required \>
		<div id="Count" class="invalid-feedback">
			@{
				if (ViewData?.ModelState?.TryGetValue("Count", out modelStateEntry) == true)
					foreach (var err in modelStateEntry.Errors)
					{
						@err.ErrorMessage
						<br />
					}
			}
		</div>
	</div>
	<div class="form-group my-2">
		<button type="submit" class="btn btn-primary w-100"><i class="fa-solid fa-plus"></i> Create New Target</button>
	</div>
</form>